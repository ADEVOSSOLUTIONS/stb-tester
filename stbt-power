#!/bin/bash

#/ usage: stbt power [--help] [--power-outlet <uri>] on|off|status
#/
#/ Send commands to network-controllable power switch.
#/
#/ Options:
#/   -h, --help    Print this help message and exit.
#/   --power-outlet <uri>
#/                 Address of the power device and the outlet on the device.
#/                 The format of <uri> is: (ipp|pdu):<hostname>:<outlet>
#/                   ipp|pdu     Model of the controllable power supply:
#/                               * ipp: IP Power 9258
#/                               * pdu: PDUeX KWX
#/                   <hostname>  The device's network address.
#/                   <outlet>    Address of the individual power outlet on
#/                               the device. Allowed values depend on the
#/                               specific device model. Optional for the
#/                               "status" command.
#/                 Taken from stbt.conf's "global.power_outlet" if not
#/                 specified on the command line.

usage() { grep '^#/' "$0" | cut -c4-; }  # Print the above usage message.
die() { echo "stbt power: error: $*" >&2; exit 1; }

main() {
    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help) usage; exit 0;;
            --power-outlet) uri="$2"; shift;;
            --power-outlet=*) uri="${1#--power-outlet=}";;
            *) break;;
        esac
        shift
    done
    command="$1"
    [[ "$command" =~ ^(on|off|status)$ ]] || die "invalid command '$command'"

    [[ -z "$uri" ]] && {
        uri=$("$(dirname "$0")"/stbt-config "global.power_outlet" 2>/dev/null) ||
            die "no power-outlet specified on command line or in config file"
    }
    model=$(uri model "$uri") || die "invalid power-outlet uri '$uri'"
    hostname=$(uri hostname "$uri") || die "invalid power-outlet uri '$uri'"
    outlet=$(uri outlet "$uri") || die "invalid power-outlet uri '$uri'"
    [[ -z "$outlet" && $command != status ]] &&
        die "missing outlet from uri '$uri'"

    $model $command $hostname "$outlet"
}

uri() {
    local regex='^(?<model>pdu|ipp):(?<hostname>[^: ]+)(:(?<outlet>[^: ]+))?$'
    echo "$2" | perl -ne \
        "if (/$regex/) { print $+{$1} ? $+{$1} : ''; }
         else { exit 1; }"
}

ipp() {
    local command=$1 hostname=$2 outlet="$3" output

    output=$(
        curl --silent --fail http://admin:12345678@$hostname/Set.cmd?CMD=$(
            ipp_command $command "$outlet")
    ) || die "failed to connect to '$hostname'"

    echo "$output" | grep -q BADPARAM &&
        die "invalid outlet '$outlet' (hint: use the 'status' command)"

    # Prettify the output from the device
    echo "$output" |
    sed 's|</*html>||g' |
    tr "," "\n" |
    sed -e 's|=1| = ON|g' -e 's|=0| = OFF|g' |
    ipp_filteroutlet "$outlet" |
    head -4  # IP Power device prints 8 outlet names, but only has 4.
}
ipp_command() {
    local command=$1 outlet="$2"
    case "$1" in
        on) echo "SetPower+$outlet=1";;
        off) echo "SetPower+$outlet=0";;
        status) echo "GetPower";;
    esac
}
ipp_filteroutlet() {
    local outlet="$1"
    if [ -z "$outlet" ]; then
        cat
    else
        grep "$outlet" ||
            die "invalid outlet '$outlet' (hint: use the 'status' command)"
    fi
}

pdu() {
    local command=$1 hostname=$2 outlet="$3"
    [[ -z "$outlet" && $command == status ]] && outlet=P1

    set -o pipefail
    # ssh access to the pdu is extremely slow... but telnet access fails when
    # multiple hosts try to connect at once.
    expect -c "
        spawn ssh admin@$hostname
        set timeout 60
        expect {
            {Are you sure you want to continue connecting} {
                send yes\n
                exp_continue
            }
            password: { send admin\n }
            eof { exit 1 }
            timeout { exit 1 }
        }
        expect {PDU Command >} { send \"pdu $command $outlet\n\" }
        expect {PDU Command >} { send QUIT\n }
        expect closed." |
    sed -En '/ON|OFF/ p' |
    tail -n +2 ||
    die "failed to connect to '$hostname'"

    [[ $command == status ]] || {
        sleep 2
        local output=$(pdu status $hostname $outlet | grep -i "$outlet")
        [[ -n "$output" ]] ||
            die "invalid outlet '$outlet' (hint: use the 'status' command)"
        echo "$output"
        echo "$output" | grep -qi "$command" || exit 1
    }
}

main "$@"
