#!/usr/bin/env python

"""
Copyright 2012-2013 YouView TV Ltd.
License: LGPL v2.1 or (at your option) any later version (see
https://github.com/drothlis/stb-tester/blob/master/LICENSE for details).
"""

import argparse
import os
import sys
import traceback

import stbt
from _stbt.state_watch import new_state_sender

parser = stbt.argparser()
parser.prog = 'stbt run'
parser.description = 'Run an stb-tester test script'
parser.add_argument(
    '--save-video', help='Record video to the specified file', metavar='FILE',
    default=stbt.get_config('run', 'save_video'))
parser.add_argument(
    '--tracing', help='Write system state and updates to this file',
    metavar='FILE', default=None)
parser.add_argument(
    'script', help='The test script to run', metavar='SCRIPT')
parser.add_argument(
    'args', nargs=argparse.REMAINDER, metavar='ARG',
    help='Additional arguments passed on to the SCRIPT')

args = parser.parse_args(sys.argv[1:])
sys.argv[1:] = args.args
stbt.debug("Arguments:\n" + "\n".join([
    "%s: %s" % (k, v) for k, v in args.__dict__.items()]))


def import_by_filename(filename_):
    module_dir, module_file = os.path.split(filename_)
    module_name, module_ext = os.path.splitext(module_file)
    if module_ext != '.py':
        raise ImportError("Invalid module filename '%s'" % filename_)
    sys.path = [os.path.abspath(module_dir)] + sys.path
    try:
        return __import__(module_name)
    finally:
        sys.path = sys.path[1:]

_tracer = None
try:
    stbt.init_run(
        args.source_pipeline, args.sink_pipeline, args.control,
        args.save_video, args.restart_source,
        stbt.get_config('global', 'transformation_pipeline'))
    _tracer = new_state_sender(args.tracing)  # pylint: disable=W0212

    _absfilename = None

    def tracefunc(frame_, event, _):
        if event == "line" and frame_.f_code.co_filename == _absfilename:
            _tracer.log_current_line(frame_.f_code.co_filename, frame_.f_lineno)
        return tracefunc

    if '::' in args.script:
        _filename, funcname = args.script.split('::', 1)
        _absfilename = os.path.abspath(_filename)
        module = import_by_filename(_filename)
        function = getattr(module, funcname)
        _tracer.log_test_starting(args.script, _filename, funcname,
                                  function.func_code.co_firstlineno)
        sys.settrace(tracefunc)
        function()
    else:
        _filename = os.path.abspath(args.script)
        _absfilename = os.path.abspath(_filename)
        _tracer.log_test_starting(args.script, args.script, "", 1)
        sys.settrace(tracefunc)

        # pylint: disable=W0611,W0612
        from stbt import (
            # For backwards compatibility. We want to encourage people to
            # explicitly import stbt in their scripts, so don't add new APIs
            # here.
            press, press_until_match, wait_for_match, wait_for_motion,
            detect_match, MatchResult, Position, detect_motion,
            MotionResult, save_frame, get_frame, MatchParameters,
            debug, UITestError, UITestFailure, MatchTimeout, MotionTimeout,
            ConfigurationError)
        __file__ = args.script
        sys.path.insert(0, os.path.dirname(_filename))
        execfile(_filename)
except Exception as e:  # pylint: disable=W0703
    sys.stdout.write("FAIL: %s: %s: %s\n" % (args.script, type(e).__name__, e))
    if hasattr(e, "screenshot") and e.screenshot is not None:
        stbt.save_frame(e.screenshot, "screenshot.png")
        sys.stderr.write("Saved screenshot to '%s'.\n" % ("screenshot.png"))
    traceback.print_exc(file=sys.stderr)

    if isinstance(e, stbt.UITestFailure):
        sys.exit(1)  # Failure
    else:
        sys.exit(2)  # Error
finally:
    sys.settrace(None)
    if _tracer:
        _tracer.log_test_ended()
        _tracer.close()
    stbt.teardown_run()
