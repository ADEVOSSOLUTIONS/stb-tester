#!/usr/bin/env python

# Copyright 2013 YouView TV Ltd.
# License: LGPL v2.1 or (at your option) any later version (see
# https://github.com/drothlis/stb-tester/blob/master/LICENSE for details).

# HTTP server that serves HTML reports on the results from tests run with
# `./run`. Allows interactive editing of testrun "failure reason".
# Uses Flask, a python web micro-framework: http://flask.pocoo.org
# Run with `cd results-directory; path/to/server 0.0.0.0:8080`

import argparse
import mimetypes
import os
from os.path import abspath, dirname, isdir, isfile, normpath
import subprocess
import sys

from flask import \
    Flask, abort, redirect, render_template, request, send_from_directory


app = Flask(__name__, instance_path=os.getcwd())

mimetypes.init()
mimetypes.types_map[".log"] = "text/plain"
mimetypes.types_map[".webm"] = "video/webm"


@app.route("/", defaults={"path": ""})
@app.route("/<path:path>")
def catch_all(path):
    f = normpath(os.path.join(app.instance_path, path))
    if not f.startswith(app.instance_path):
        abort(404)

    if isfile(f):
        return send_from_directory(app.instance_path, path)
    if isdir(f):
        if not path.endswith("/") and path != "":
            return redirect(path + "/")
        index = os.path.join(path, "index.html")
        if isfile(index):
            return send_from_directory(app.instance_path, index)
        else:
            return render_template(
                "directory-index.html",
                dir=(path or "/"),
                entries=[
                    x + "/" if isdir(os.path.join(f, x)) else x
                    for x in os.listdir(f)])

    abort(404)


@app.route("/<path:testrun>/failure-reason", methods=["POST"])
def failure_reason(testrun):
    f = normpath(os.path.join(app.instance_path, testrun, "failure-reason"))
    if not f.startswith(app.instance_path) or not isfile(f):
        abort(404)
    manual_reason = request.form["value"].strip()
    automatic_reason = open(f).read().strip()
    if len(manual_reason) == 0 or manual_reason == automatic_reason:
        try:
            os.remove(f + ".manual")
        except OSError:
            pass
    else:
        with open(f + ".manual", "w") as ff:
            ff.write(manual_reason)
    subprocess.Popen([
        os.path.join(dirname(abspath(__file__)), "report"),
        "--html-only",
        testrun])
    return ""


if __name__ == "__main__":
    p = argparse.ArgumentParser()
    p.add_argument(
        "--debug", action="store_true",
        help="Enable python backtraces and application reloading")
    p.add_argument(
        "listen", metavar="address:port", default="localhost:5000", nargs="?",
        help="The address and port to listen on (default: %(default)s)")
    args = p.parse_args(sys.argv[1:])
    host, port = args.listen.split(":")
    app.run(host=host, port=int(port), debug=args.debug)
