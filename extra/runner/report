#!/usr/bin/env bash
#                                                    -*- sh-basic-offset: 2 -*-

# Copyright 2013 YouView TV Ltd.
# License: LGPL v2.1 or (at your option) any later version (see
# https://github.com/drothlis/stb-tester/blob/master/LICENSE for details).

#/ Usage: report <testrun directory> [<testrun directory>...]
#/
#/ Classifies the results previously generated by 'run'
#/ according to the reason for failure.
#/ Generates a detailed report in <testrun directory>/index.html
#/ and a summary report in <testrun directory>/../index.html.

usage() { grep '^#/' "$0" | cut -c4-; }

main() {
  runner=$(dirname "$(abspath "$0")")

  while getopts "h" option; do
    case $option in
      h) usage; exit 0;;
      *) die "Invalid option '-$option'. Use '-h' for help.";;
    esac
  done
  shift $((OPTIND - 1))
  [[ $# -gt 0 ]] || { usage >&2; exit 1; }

  for rundir in "$@"; do
    (
      cd "$rundir" || die "Invalid directory '$rundir'"
      [ -r exit-status ] ||
        die "No exit status (test still in progress); skipping"
      classify
      sort --merge stdout.log stderr.log > combined.log
      python "$runner"/report.py . > index.html.$$ && mv index.html.$$ index.html
    )
  done

  # Generate summary report
  for resultsdir in $(
    for rundir in "$@"; do dirname $(abspath $rundir); done | sort | uniq)
  do
    (
      cd "$resultsdir" || die "Invalid directory '$resultsdir'"
      python "$runner"/report.py index.html > index.html.$$ &&
      mv index.html.$$ index.html
    )
  done
}

classify() {
  local status=$(cat exit-status)
  local testname=$(cat test-name)

  if [ $status -eq 0 ]; then
    reason success

  elif [ $status -gt 128 ]; then
    reason killed "($(signalname $((status - 128))))"

  elif grep -q "FAIL: .*$(basename "$testname"): " stdout.log; then
    reason "$(sed -n "s/^.*FAIL: .*$(basename "$testname"): //p" stdout.log)"

  else
    reason unknown
  fi
}

reason() {
  echo "$*" > failure-reason
  debug "$*"
}

signalname() {
  local num=$1
  ( set -o pipefail
    kill -l | grep -Eo "\b$num\) SIG\S+" | awk '{print tolower($2)}' ||
      echo $num
  )
}

debug() { echo "$rundir: $*"; }
die() { echo "$(basename "$0"): error: $*" >&2; exit 1; }

# Portable implementation of GNU "readlink -f" to support BSD/OSX.
abspath() {
  python -c 'import os, sys; print os.path.realpath(sys.argv[1])' "$1"
}

main "$@"
