#!/usr/bin/env python

# Copyright 2016 Stb-tester.com Ltd.
# Copyright 2013 YouView TV Ltd.
# License: LGPL v2.1 or (at your option) any later version (see
# https://github.com/stb-tester/stb-tester/blob/master/LICENSE for details).

"""Run static analysis over the specified stb-tester python scripts.

"stbt lint" runs "pylint" with the following additional checkers:

* E7001: The image path given to 'stbt.wait_for_match' (and similar functions)
  does not exist on disk.
* E7002: The return value from is_screen_black/match/match_text/ocr/wait_until
  isn't used (perhaps you've forgotten to use "assert").
* E7003: The argument given to "wait_until" isn't a callable.
"""

import argparse
import os
import subprocess
import sys


def main(argv):
    parser = argparse.ArgumentParser(
        prog="stbt lint",
        usage="stbt lint [--help] [pylint options] filename [filename...]",
        description=__doc__,
        epilog="Any other command-line arguments are passed through to pylint.",
        formatter_class=argparse.RawDescriptionHelpFormatter)
    _, pylint_args = parser.parse_known_args(argv[1:])

    try:
        with open("/dev/null", "w") as devnull:
            subprocess.check_call(["pylint", "--help"],
                                  stdout=devnull, stderr=devnull)
    except OSError as e:
        if e.errno == 2:
            sys.stderr.write(
                "stbt lint: error: Couldn't find 'pylint' executable\n")
            return 1

    env = os.environ
    env["PYTHONPATH"] = os.pathsep.join([
        os.path.dirname(__file__),
        env.get("PYTHONPATH", "")])

    return subprocess.call(
        ["pylint", "--load-plugins=_stbt.pylint_plugin"] + pylint_args,
        env=env)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
